node {
  try{
  stage('HelloWorld') {
    echo 'Hello World'
  }
  stage('Git') {
    git branch: 'development', credentialsId: '<auto-generated>', url: '<codebase_URL>'
  }

  stage('maven build') {
    sh 'mvn -f pom.xml clean install'
  }
  stage('Jacaco Report') {
    jacoco exclusionPattern: 'src/main/java,src/test/java', inclusionPattern: 'target/classes,target/test-classes'
  }
  stage('Sonar Analysis') {
    withSonarQubeEnv('sonar'){
                    sh 'mvn -f pom.xml sonar:sonar -Dsonar.projectKey=<project-key> -Dsonar.projectName=<project_name>'
                }
  }
  stage("Quality Gate"){
          timeout(time: 1, unit: 'HOURS') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      }
  stage('Success') {
    echo 'Quality gate passed successfully'
  }
  stage('Send build artifacts over SSH') {
    sshPublisher(publishers: [sshPublisherDesc(configName: '<Remote_VM>', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '<remote_path>', remoteDirectorySDF: false, removePrefix: 'target', sourceFiles: 'target/<war_name>')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
  }
  }catch(e) {
            
            echo 'Build failed'
            notifyfailed()
            throw e
   }
}

def notifyfailed() {
     notification_list="<notification_list>"
     mail_path="s-nail -S smtp=<smtp_host>"
     build_commit= sh (returnStdout: true, script: "git log -1 ").trim()
     echo "azure commit logs -- ${build_commit} "
     console_msg= sh (returnStdout: true, script: "cat  ${JENKINS_HOME}/jobs/${env.JOB_NAME}/builds/${env.BUILD_NUMBER}/log |  grep ERROR").trim()
     echo "--------${console_msg}" 
     sh " echo 'Mail from Jenkins Server - Build Failure Detected on JobName -- ${env.JOB_NAME},  Build Number -- ${env.BUILD_NUMBER} \n\n ${build_commit} \n ----------ERROR MESSAGE----------- \n\n ${console_msg}' | ${mail_path} -r '<Sender_mailid>' -s 'Jenkins Server - Build Failure JobName -- ${env.JOB_NAME}' -v '$notification_list' "
       }
    
    
